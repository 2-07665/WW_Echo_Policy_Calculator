"""Public re-export surface for the policy calculator internals."""

from __future__ import annotations

from .api import (
    PolicyComputationResult,
    build_scorer,
    build_simple_scorer,
    buff_names_to_indices,
    compute_optimal_policy,
    make_cost_model,
    score_to_int,
)
from .cost import (
    CostModel,
    DKQ_COST,
    ECHO_COST,
    EXP_COST_BY_LEVEL,
    EXP_REFUND_RATIO_DEFAULT,
    SUCCESS_DKQ_ADDITIONAL_COST,
    exp_cost_of_k,
    get_exp_refund_ratio,
    set_exp_refund_ratio,
    success_exp_additional_cost,
)
from .data import (
    BUFF_TYPE_COUNTS,
    BUFF_TYPE_MAX_VALUES,
    BUFF_NAME_TO_INDEX,
    BUFF_TYPES,
    BUFF_LABELS,
    DEFAULT_BUFF_WEIGHTS,
    MAX_SELECTED_TYPES,
    TOTAL_BUFF_TYPES,
    ProbabilityMassFunction,
    RawCountMap,
    RawValueEntry,
    USER_COUNTS_JSON_PATH,
    build_active_counts,
    clone_count_maps,
    empty_user_buff_type_counts,
    load_character_presets,
    load_user_buff_type_counts,
    normalize_user_buff_type_counts,
    save_user_buff_type_counts,
)
from .models import FirstUpgradeGroup, FirstUpgradeOption, SimulationSummary
from .scoring import (
    build_score_pmfs_from_counts,
    create_buff_weight_list,
    make_linear_score_fn,
    make_simple_score_fn,
)
from .simulation import (
    always_upgrade,
    simulate_many,
    simulate_once,
    strategy_two_one_two,
    upgrade_until_impossible,
)
from .solver import PolicySolver

__all__ = [
    "PolicyComputationResult",
    "build_scorer",
    "build_simple_scorer",
    "buff_names_to_indices",
    "compute_optimal_policy",
    "make_cost_model",
    "score_to_int",
    "CostModel",
    "DKQ_COST",
    "ECHO_COST",
    "EXP_COST_BY_LEVEL",
    "EXP_REFUND_RATIO_DEFAULT",
    "BUFF_NAME_TO_INDEX",
    "SUCCESS_DKQ_ADDITIONAL_COST",
    "exp_cost_of_k",
    "get_exp_refund_ratio",
    "set_exp_refund_ratio",
    "success_exp_additional_cost",
    "BUFF_TYPE_COUNTS",
    "BUFF_TYPE_MAX_VALUES",
    "BUFF_TYPES",
    "BUFF_LABELS",
    "DEFAULT_BUFF_WEIGHTS",
    "MAX_SELECTED_TYPES",
    "TOTAL_BUFF_TYPES",
    "USER_COUNTS_JSON_PATH",
    "ProbabilityMassFunction",
    "RawCountMap",
    "RawValueEntry",
    "build_active_counts",
    "clone_count_maps",
    "empty_user_buff_type_counts",
    "load_character_presets",
    "load_user_buff_type_counts",
    "normalize_user_buff_type_counts",
    "save_user_buff_type_counts",
    "FirstUpgradeGroup",
    "FirstUpgradeOption",
    "SimulationSummary",
    "build_score_pmfs_from_counts",
    "create_buff_weight_list",
    "make_linear_score_fn",
    "make_simple_score_fn",
    "always_upgrade",
    "simulate_many",
    "simulate_once",
    "strategy_two_one_two",
    "upgrade_until_impossible",
    "PolicySolver",
]
